================================================================================
        Code Conventions
================================================================================

--------------------------------------------------------------------------------
        C Style Rules
--------------------------------------------------------------------------------

In the case of userspace programming, use the style that is appropriate, but try to adhere generally.

        Tabs or Spaces
        ~~~~~~~~~~~~~~

Tabs. This is a file size consideration.

        Naming
        ~~~~~~

................................................................................
FunctionCase
MACRO_DEFINE_CASE
TYPE_CASE
variable_case
................................................................................

        Bracket Style
        ~~~~~~~~~~~~~
................................................................................
typedef struct {
        ...
};

if (...) {
        ...
}

for (...) {
        ...
}

while (...) {
        ...
}

function declaration
{
        ...
}
................................................................................

If the function takes more than two parameters, the parameter list should look be formatted like this:

................................................................................
BOOL Vm_PageOp( PVOID base,
                LONG page_count,
                LONG opmask)
{
        ...
}

................................................................................

The argument types and names must all be tab aligned except if there is only one.

Functions that take similar inputs should take them in roughly the same order.

................................................................................
VOID AddByte(PBYTE ch, LONG num) { (*ch)++; }
VOID SubByte(PBYTE ch, LONG num) { (*ch)++; }
................................................................................

--------------------------------------------------------------------------------
        Design Principles
--------------------------------------------------------------------------------

        Signedness
        ~~~~~~~~~~

If a module is intended to be portable, use stdint.h for everything that explicitly requires a size. size_t should be used instead of int and long.

Never compare different signs without explicitly casting. Always use an unsigned type unless a negative has meaning in the context and is needed.

This applies to kernel and user.

        Good Practice
        ~~~~~~~~~~~~~

Never shift by an arbitrary number without checking. Always use buffer sizes correctly. Do not allocate large structures on the stack.

Never allow anything to fail silently.

The following options should be used for GCC. Resolving warnings takes precendent over other style guidelines:

-Wall
-Wextra
-Wcast-align
-Wcast-qual
-Wdisabled-optimization
-Wformat=2
-Winit-self
-Wlogical-op
-Wmissing-include-dirs
-Wold-style-cast
-Wredundant-decls
-Wshadow
-Wsign-promo
-Wstrict-null-sentinel
-Wstrict-overflow=5
-Wundef
-Wno-unused
-Wno-parentheses
-fdiagnostics-show-option
-Wconversion
-Wrestrict

        Static Limits
        ~~~~~~~~~~~~~

Static limits should always be prefered over dynamic memory allocation because the latter is always slow on OS/90 and any other operating system running on an old computer.

For kernel code, do not allocate whole pages if the data is too small. The allocation functionality is deliberately barebones.

Static limits should still be robust. If they are exceeded, consider allocating memory in that rare case. Do not do the original Unix thing of silently truncating lines or something like that.

Dynamic structures should have this sort of hierarchy. Ask if one is sufficient before moving on down:
1. Static limit
2. Static limit and reallocate if exceeded
3. Resizable linear memory block that acts as an array
4. Linked list inside a linear pool
5. Sparse linked list with discontoguous blocks

        Goto
        ~~~~

`goto` is good as long as it is not jumping backward. In general, C is meant to be more comprehensible without comments than assembly, but if the opposite is true, by all means use `goto`.

        Robustness
        ~~~~~~~~~~

- Develop "library" style functions in another operating system.
- Use sentinel bytes to check for buffer overflows even in userspace
- Test edge cases
- Always check error codes
- Never run CPU instructions that are not detected first
- Always expect memory allocations to potentially fail
- Run tests with inline asserts and testing functions.
- If unsure about the behavior of various hardware configurations or confused by datasheets, do tests and use asserts in debug code.
- Avoid assembly language unless it is clearly better.

--------------------------------------------------------------------------------
        Other Conventions
--------------------------------------------------------------------------------

(Work in progress)

Functions that convert one type or return a type based in some way on the input should have the return type or some other informative detail closest to the begining of the name. What it converts from comes after that closer to the end.

The word "from" or "of" should relate the two.

- FHANDLE FHandleFromPath(const char *path);
- SumOfInts(int a, int b);

This is actually contrary to how many C library functions are named.

Function arguments must follow the following order if any arguments fit the listed descriptions, in this order:

- Object currently working on (this->)
- File handle
- Destination buffer
- Destination size/truncation limit (unless shared, only when transfoming)
- Source buffer
- Source buffer length
- Pointers used for output
- Pointers used for input ()
- Any integer/float type

If a pointer is used to return a value, then use a pattern more like `NewFHandleForPath(FHANDLE *)` to prevent confusion. Use Get/Set words.

If stdio.h followed these rules:

FILE *NewFHandleFromPathNMode(const char *path, const char *mode);

Read does not need to change much, because the number of bytes actually written is not always significant and does not imply any kind of transfer of information to the new type based on what is in the input. A pointer is used to return infromation, so little needs to change. "Read" is analogous to "get" also.

size_t FileRead(FILE* h);

If a function operates on a particular type of object, that always comes first in the argument list as seen above. This should also occur in the name somehow. Avoid type capitalization.

If creating a new object with a user provided pointer, use the term "Init"
If creating with dynamic allocation, use the term New.
Avoid the term Create but it is okay somtimes.

Do not use excessively long names and abbreviate/use acronyms.
The C function fclose conveys that it works with a file and closes it.
No need for CloseFile or FileClose.

To be more exact:
- INTxH instead of HookableSVINT
- M_Alloc instead of M_AllocatePages
        - "M" and "Alloc" make it very clear it allocates memory.

All of these conventions can be broken if it makes the code clearer.

