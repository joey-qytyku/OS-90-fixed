================================================================================
	Extended Memory Manager
================================================================================

The OS/90 memory manager supports:
* Demand paging (e.g. loading a program larger than RAM)
* Single address space
* Uncommitted memory
* malloc/free

RAM and page file space are indexed in an array called the MAT or Memory Allocation Table.

If there is no more memory, demand-paged space is allocated. A demand paging window is used to achieve orthogonality.

> Swap is an incorrect term. OS/90 does not swap.


--------------------------------------------------------------------------------
	General Description
--------------------------------------------------------------------------------

Memory blocks are alloated as non-resizable chunks with fixed and non-resizable virtual address ranges. Inside the page tables, there is a header table entry and a buffer break entry.

> Keep track of free and used page table entries in variable.

Uncommitted memory is memory that is to be allocated when a virtual page is accessed so that it does not all have to be reserved at once. The uncommitted status in indicated using free bits in the page tables. Using iteration, the allocation in need of extension is found, and unaligned addresses are also accounted for to improve performance.

There is a single page table for the first 1M of memory with the rest being reserved, another for the kernel, and any number for extended memory that is allocatable.

--------------------------------------------------------------------------------
	Thread Safety
--------------------------------------------------------------------------------

Each allocation is protected by a mutex lock inside the header. All operations must run in T2 unless otherwise specified.

--------------------------------------------------------------------------------
	Error Codes
--------------------------------------------------------------------------------

This can easily be stringified by calling M_ErrToStr.

--------------------------------------------------------------------------------
	API
--------------------------------------------------------------------------------


................................................................................
	LONG M_GetInfo(BYTE type)
................................................................................

0 - Free extended memory pages
1 - Size of extended memory in pages

2 - Free disk backed space in pages (DBS)
3 - Size of DBS in pages

4 - Address space pages free
5 - Address space pages total
6 - Largest range that can be allocated of mapped or uncommitted pages

7 - Free conventional memory
8 - Largest conventional memory block
9 - Percentage of extended memory pages locked (0-100 integer)

10- Previous page faults per second value


For maximum accuracy, disable preemption, especially when performing a multi-step calculation with results. This is safe.

	Example
	~~~~~~~
................................................................................
LONG MemoryInUsePercent()
{
	// Disable
	S_PreemptInc();
	LONG v = (M_GetInfo(0)*100) / (M_GetInfo(1)*100);
	// Enable
	S_PreemptDec();
}
................................................................................

> Conventional memory must always be 640K

TODO: Vm_Alloc, Vm_Free, Vm_Realloc, Vm_PageOp

................................................................................
	_pset(page_bit)
	_pclr(page_bit)
................................................................................

Returns an opmask componenet that enables/disables the page bit. These are macro definitions.

> Maybe use a struct with bit fields.

................................................................................
	void* M_Alloc ( void*   force_addr,
			UINT    commit,
			UINT    uncommit,
			UINT    bits
			);
................................................................................

Allocate a linear region of virtual memory and map a non-contigous set of pages to the location.

`force_addr` is the address to force the allocation into. It is fully validated by iterating through page tables in reverse to confirm there is no overflow.

A buffer overflow detector page is allocated after it.

	Notes
	~~~~~

This is NOT a general purpose malloc function. Is is quite slow and will take maybe 500 to thousands of clock cycles to run.

Uncommitted pages are also not fast and require physical memory to be allocated, but may end up being disk-backed if there is none. Furthermore, uncommitted memory also requires iteration to find the allocation in need of extension.

- T2 only
- Quite slow, mainly for supporting DPMI

Conforming to:
- DPMI 1.0, 0504H: https://delorie.com/djgpp/doc/dpmi/api/310504.html
	- Address specification (limited)
	- Page granularity
	- Commit/uncommit
- DPMI 0.9, 0501H
	- Handle corresponds with base address.
	- Allocation break page is used to section off.

................................................................................
	BOOL M_PageOp(  void* base,
			uint page_count,
			uint opmask);
................................................................................

Change the page bits of page table entries.

No runtime checks are done to confirm if the CPU handles the PAT.

The top 16 bits are the "change which" mask and the bottom 16 are the values to set them to.

Return:
- 0 if OK
- 1 if base is not aligned or invalid, page_count is infeasible, or opmask changes special system-reserved page bits.

Example:

................................................................................
	int M_Free(void* base);
................................................................................

................................................................................
	uint* M_LockPageTables(void);
................................................................................

Asserts the lock responsible for the page tables (it may be the same as MM).

The page tables are laid out flat in memory. It is returned by this pointer.

................................................................................
	void CopyPages(void* d, void* s, uint size);
................................................................................

The pages must be present and committed. Performs a non-temporal copy of a large block. This also disabled caching globally for the duration for the whole copy and preemption.

--------------------------------------------------------------------------------
	Page Attribute Table
--------------------------------------------------------------------------------

The PAT has many useful applications:
- Faster framebuffer access with write combining
- Reduced cache polution for memcpy-style operations

Enabling PAT turns bits `PCD PWT` into an index to a table of other options, which are by default set for compatibility with OS'es that use the PAT bit but have no knowledge of it. There are four possible options.

The PAT options are:
- 0: UC- or uncached [1]
- 1: WC: Write-combine [2]
- 2: WP: Write-protect [3]
- 3: UC+

[1] The reason for this is that the MTTRs are often set by the BIOS and we do not want to interfere with it. Use this most of the time

[2] WC is best for memory regions that are frequently written into non-sequentially and over existing data. It stores the writes in a lower cache level and writes back the results in a burst access. Framebuffers are a notable example, although

[3] Not sure how different this is from writethrough

Uncached regions are very useful for performance as not all computers have non-temporal operations. memcpy-style operations could in theory be faster this way because cache is not wasted.
