================================================================================
	Virtual 8086 Mode
================================================================================

--------------------------------------------------------------------------------
HV86

INTxH()
RUNxH()
HOOKxH()

These are the basic services provided by the kernel for controlling and making requests to the BIOS or DOS from protected mode.

There exist a chain of handlers for each INT call.

--------------------------------------------------------------------------------
	API Listing
--------------------------------------------------------------------------------

................................................................................
	LONG INTxH(BYTE x, PSTDREGS r);
................................................................................

	   BRIEF
	~~~~~~~~~~

This is the general interface. The return value is AX zero extended to a LONG after the INT is processed. If the original registers need to be preserved, note that they will be clobbered.

If the supplied SS:SP pair are zero, a stack is automatically chosen.

	   WARNINGS
	~~~~~~~~~~~~~

	   CONTEXTS
	~~~~~~~~~~~~~~

T1 or T2. Internally non-reentrant but guarded with preemption-off.


	Example Code
	~~~~~~~~~~~~

Here is an example of monitoring the input to a call without changing the parameters. In the case of doing so (for whatever reason) ensure that the context is not clobbered incorrectly.

................................................................................
static HV86 old;

PVOID Handler(PSTDREGS r)
{
	if (r->ah == 0xE) {
		printf("Printing character %x", r->al);
		return V86_REFLECT;
	}
	else {
		return (PVOID)old;
	}
}

VOID DriverMain(VOID)
{
	HOOKxH(0x10, &old, Handler);
}
................................................................................


................................................................................
	LONG V86xH(PSTDREGS r);
................................................................................

	Brief
	~~~~~

Simulates an INT instruction. The vector must be coded in the register structure. No capture is used whatsoever.

This returns the vector of the first INT instruction enountered while executing so that the caller could decide to call a hook first of continue.

--------------------------------------------------------------------------------
	Implement An API
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
	Addressing Extensions
--------------------------------------------------------------------------------

If a DPMI server does not support extended DOS API translation, it will send all INT calls to DOS without regard for the contents of segment registers.

However, the caller's context of DOS protected mode can be from protected mode. It then can be translated by the kernel before being passed to INTxH.

OS/90 implements DOS API translations compatible with Microsoft extensions and also extends INT 13H for 32-bit disk access.

The input context having the VM bit turned off is an indicator that it is not protected mode. This is a context taken directly from a task block.

Some API's may be called from ring-0 and require extensions to be applied. If you want the addressing to work in protected mode, ensure that EFLAGS has VM turned on before calling.

Ring-0 callers must be supported by any extended interface, but ring-3 selectors should not be referencing ring-0. OS/90 drivers always perform proper checks.

When calling any interface, remember that anything that interacts with the user will probably not work correctly. Use debug logging, not AH=9, as the latter may print the string to some random process.

--------------------------------------------------------------------------------
	Advice
--------------------------------------------------------------------------------

SV86 is always slower than a capture handler. Anything done in 32-bits will be faster as there is no need to switch rings twice.

If the API interfaces with a device (as many do), the implementor driver has many options for emulation:

o Emulate the entire device and make each content local (e.g. text mode console). In this case, there is little or no actual access to devices.
o Permit one at a time FULL access. Vectors may be hooked to detect attempts to access a device. Other tasks must wait until a "done" condition is raised.
o Limited number of emulation contexts served by semaphore and patially emulated or fully emulated.
o Kill the program if the operation is unsafe.

Implementing INT 21H features for outputting text involve total emulation of the text framebuffer per task.

Expanded memory (EMS) emulation is also a form of total emulation, as the device does not do any IO or user interaction.

Most OS/90 device drivers let one process access something at a time, but in some situations it is not possible to easily determine when a task is really done unless it terminates. The DMA controller is one example, but that is not an API. An API like VDS (Virtual DMA Services) is however, and would need to be part of an emulation-based driver (likely simulating what a single-tasking API would do using arbitrated access).

> Termination hook?

Terminating the program cannot be done using the scheduler calls because a proper cleanup may not take place.
